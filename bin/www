#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('social-chatting-service:server');
var http = require('http');
const { Socket } = require('dgram');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
// app.io.attach(server);


var io = require('socket.io')(server);
var direct = io.of('/direct');  // namespace  direct

io.on('connection', function(socket){ // 소켓이 연결되었을 

  socket.on('joinRoom', function(data){
    var userId = data.userId;
    var room = data.room;
    var roomInfo = [];

    socket.join(room);  // 룸 입장
    console.log('JOIN ROOM', io.sockets.adapter.rooms);
    io.sockets.in(room).emit('msgAlert', userId + '님이 입장하셨습니다.');
    
    io.sockets.in(room).emit('roomInfo', roomInfo);

  });
  socket.on('leaveRoom', function(data){

    var userId = data.userId;
    var room = data.room;
    socket.leave(room);  // 룸 퇴장
    console.log('OUT ROOM', io.sockets.adapter.rooms);
    io.sockets.in(room).emit('msgAlert', userId + '님이 퇴장하셨습니다.');
  });
  socket.on('sendMsg', function(data){  // message 보내기
    var room = data.room;
    io.sockets.in(room).emit('msgSend',data);//자신포함 전체 룸안의 유저
    //socket.broadcast.to(room).emit('msgAlert',data); //자신 제외 룸안의 유저
    //socket.in(room).emit('msgAlert',data); //broadcast 동일하게 가능 자신 제외 룸안의 유저
    //io.of('namespace').in(room).emit('msgAlert', data) //of 지정된 name space의 유저의 룸
  });

  socket.on('disconnect', function(){
    console.log('NOT USER DISCONNECT : ', socket.id);
    console.log('ROOM LIST', io.sockets.adapter.rooms);
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
